/* ========================================
   THE NEW SMILE GUIDE - CAPTIVATING CSS
   Designer: Claude
   Version: 1.0
   ======================================== */

/* ---- CUSTOM FONT IMPORTS ---- */
@import url('https://fonts.googleapis.com/css2?family=Caudex:wght@400;700&family=Inter:wght@300;400;500;600;700&display=swap');

/* ---- ROOT VARIABLES ---- */
:root {
    /* Core Color Palette */
    --primary-blue: #386088;
    --primary-blue-light: #4a7ba8;
    --primary-blue-dark: #2a4b6a;
    --primary-orange: #f29c74;
    --primary-orange-light: #f7b799;
    --primary-orange-dark: #e6805a;
    --accent-yellow: #f9a75f;
    --accent-yellow-light: #fbc08e;
    --accent-yellow-dark: #e8913f;
    
    /* Background Colors */
    --bg-cream: #fff8e8;
    --bg-cream-dark: #f5eed8;
    --bg-teal-light: #e8f5f2;
    --bg-blue-light: #e6f0f7;
    
    /* Text Colors */
    --text-dark: #2d3c4e;
    --text-medium: #546274;
    --text-light: #8494a7;
    --text-white: #ffffff;
    
    /* Spacing */
    --space-xs: 0.25rem;
    --space-sm: 0.5rem;
    --space-md: 1rem;
    --space-lg: 1.5rem;
    --space-xl: 2rem;
    --space-xxl: 3rem;
    
    /* Animation Speeds */
    --transition-fast: 150ms;
    --transition-medium: 300ms;
    --transition-slow: 500ms;
    
    /* Shadow Effects */
    --shadow-soft: 0 5px 15px rgba(0, 0, 0, 0.05);
    --shadow-medium: 0 8px 30px rgba(0, 0, 0, 0.1);
    --shadow-hard: 0 10px 40px rgba(0, 0, 0, 0.2);
    
    /* Border Radius */
    --radius-sm: 5px;
    --radius-md: 10px;
    --radius-lg: 15px;
    --radius-xl: 20px;
    --radius-full: 9999px;
}

/* ---- DARK MODE ---- */
.dark-mode body {
    background-color: var(--dark-bg);
    color: var(--dark-text);
}
.dark-mode header {
    background-color: var(--dark-blue);
    box-shadow: 0 2px 10px rgba(0,0,0,0.2);
}
.dark-mode .hero-section {
    background: linear-gradient(135deg, var(--dark-blue) 0%, var(--dark-surface) 100%);
    color: var(--dark-text);
}
.dark-mode .cta-button {
    background-color: var(--dark-accent);
    color: #fff;
}
.dark-mode .cta-button:hover {
    background-color: var(--primary-orange-dark);
}
.dark-mode .testimonials-section, .dark-mode .gallery-section, .dark-mode .quiz-section {
    background-color: var(--dark-surface);
    color: var(--dark-text);
}

/* ---- RESET & BASE STYLES ---- */
*, *::before, *::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

html {
    font-size: 16px;
    scroll-behavior: smooth;
    scrollbar-width: thin;
    scrollbar-color: var(--primary-blue) var(--bg-cream);
}

body {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    color: var(--text-dark);
    background-color: var(--bg-cream);
    line-height: 1.6;
    overflow-x: hidden;
}

h1, h2, h3, h4, h5 {
    font-family: 'Caudex', serif;
    font-weight: 700;
    line-height: 1.3;
}

img {
    max-width: 100%;
    height: auto;
    display: block;
}

a {
    text-decoration: none;
    color: inherit;
    transition: all var(--transition-medium);
}

button {
    cursor: pointer;
    font-family: inherit;
    border: none;
    background: none;
}

/* ---- UTILITY CLASSES ---- */
.container {
    width: 100%;
    max-width: 1240px;
    margin: 0 auto;
    padding: 0 var(--space-lg);
}

.section-padding {
    padding: var(--space-xxl) 0;
}

.text-center {
    text-align: center;
}

.hidden {
    display: none;
}

.visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    padding: 0;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    border: 0;
}

/* ---- ANIMATIONS ---- */
@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes slideUp {
    from { transform: translateY(30px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
}

@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
}

@keyframes float {
    0% { transform: translateY(0px); }
    50% { transform: translateY(-10px); }
    100% { transform: translateY(0px); }
}

@keyframes shimmer {
    0% { background-position: -1000px 0; }
    100% { background-position: 1000px 0; }
}

/* ---- HEADER STYLES ---- */
header {
    background-color: rgba(255, 248, 232, 0.97);
    position: sticky;
    top: 0;
    z-index: 1000;
    box-shadow: var(--shadow-soft);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    transition: all var(--transition-medium);
}

header.scrolled {
    padding: var(--space-xs) 0;
    box-shadow: var(--shadow-medium);
}

.nav-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-md) 0;
}

.logo {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
}

.logo svg {
    transition: transform var(--transition-medium);
}

.logo:hover svg {
    transform: rotate(10deg);
}

.logo-text {
    font-family: 'Caudex', serif;
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--primary-blue);
    transition: color var(--transition-medium);
}

.logo:hover .logo-text {
    color: var(--primary-blue-light);
}

nav ul {
    display: flex;
    list-style: none;
    gap: var(--space-lg);
}

nav ul li a {
    color: var(--primary-blue);
    font-weight: 500;
    position: relative;
}

nav ul li a::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: -5px;
    width: 0;
    height: 2px;
    background-color: var(--primary-orange);
    transition: width var(--transition-medium);
}

nav ul li a:hover {
    color: var(--primary-orange);
}

nav ul li a:hover::after {
    width: 100%;
}

.cta-button {
    background-color: var(--accent-yellow);
    color: var(--text-white);
    padding: var(--space-md) var(--space-xl);
    border-radius: var(--radius-full);
    font-weight: 600;
    letter-spacing: 0.5px;
    box-shadow: 0 4px 10px rgba(242, 156, 116, 0.3);
    transition: all var(--transition-medium);
    position: relative;
    overflow: hidden;
    z-index: 1;
}

.cta-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: all var(--transition-slow);
    z-index: -1;
}

.cta-button:hover {
    background-color: #e88f45;
    transform: translateY(-3px) scale(1.04);
    box-shadow: 0 8px 32px rgba(249, 167, 95, 0.18);
}
    transform: translateY(-3px);
    box-shadow: 0 7px 15px rgba(242, 156, 116, 0.4);
    background-color: var(--primary-orange);
}

.cta-button:hover::before {
    left: 100%;
}

.cta-button:active {
    transform: translateY(0);
    box-shadow: 0 4px 8px rgba(242, 156, 116, 0.3);
}

.mobile-menu-btn {
    display: none;
    background: none;
    border: none;
    font-size: 1.5rem;
    color: var(--primary-blue);
    cursor: pointer;
}

/* ---- HERO SECTION ---- */
.hero {
    position: relative;
    background: linear-gradient(135deg, #a4d9e4 0%, #c5e6dc 50%, #e8f5f2 100%);
    min-height: 80vh;
    display: flex;
    align-items: center;
    overflow: hidden;
}

.hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url('/api/placeholder/1920/1080');
    background-size: cover;
    background-position: center;
    opacity: 0.15;
    z-index: 0;
}

.hero-content {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: var(--space-xxl);
}

.hero-text {
    max-width: 600px;
    animation: slideUp var(--transition-slow) ease-out forwards;
}

.hero-text h1 {
    font-size: 3.75rem;
    margin-bottom: var(--space-lg);
    color: var(--text-white);
    text-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    line-height: 1.2;
}

.hero-text h2 {
    font-size: 1.5rem;
    color: var(--primary-orange);
    margin-bottom: var(--space-xl);
    font-weight: 500;
}

.hero-image {
    position: relative;
    width: 40%;
    animation: float 6s ease-in-out infinite;
}

.hero-image img {
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-hard);
    transform: perspective(1000px) rotateY(-5deg);
    transition: all var(--transition-medium);
}

.hero-image::before {
    content: '';
    position: absolute;
    inset: -15px;
    background: linear-gradient(135deg, var(--primary-orange-light), var(--accent-yellow));
    border-radius: var(--radius-xl);
    z-index: -1;
    opacity: 0.3;
    transform: perspective(1000px) rotateY(-8deg);
}

.hero-image:hover img {
    transform: perspective(1000px) rotateY(0deg);
}

/* ---- DENTAL IMPLANTS SECTION ---- */
.dental-implants {
    position: relative;
    background-color: var(--bg-cream);
    padding: var(--space-xxl) 0;
    z-index: 1;
}

.dental-implants::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: radial-gradient(circle at 10% 30%, rgba(164, 217, 228, 0.1) 0%, transparent 50%),
                      radial-gradient(circle at 90% 70%, rgba(242, 156, 116, 0.1) 0%, transparent 50%);
    z-index: -1;
}

.dental-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
}

.dental-content h2 {
    font-size: 2.5rem;
    color: var(--primary-blue);
    margin-bottom: var(--space-xl);
    position: relative;
    display: inline-block;
}

.dental-content h2::after {
    content: '';
    position: absolute;
    width: 50%;
    height: 3px;
    background: linear-gradient(90deg, transparent, var(--primary-orange), transparent);
    bottom: -10px;
    left: 25%;
}

.implant-person {
    margin: var(--space-xl) 0;
    position: relative;
    max-width: 300px;
}

.implant-person img {
    border-radius: var(--radius-full);
    box-shadow: var(--shadow-medium);
    transition: all var(--transition-medium);
}

.implant-person:hover img {
    transform: scale(1.05);
}

.options-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--space-md);
    width: 100%;
    max-width: 700px;
    margin-top: var(--space-xl);
}

.option-button {
    background-color: rgba(249, 167, 95, 0.15);
    border: 1px solid rgba(249, 167, 95, 0.3);
    color: var(--primary-blue);
    padding: var(--space-lg);
    border-radius: var(--radius-lg);
    font-weight: 600;
    transition: all var(--transition-medium);
    cursor: pointer;
    position: relative;
    overflow: hidden;
    z-index: 1;
}

.option-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, var(--accent-yellow-light), var(--primary-orange-light));
    opacity: 0;
    z-index: -1;
    transition: opacity var(--transition-medium);
}

.option-button:hover {
    transform: translateY(-5px);
    color: var(--text-dark);
    box-shadow: var(--shadow-medium);
    border-color: transparent;
}

.option-button:hover::before {
    opacity: 1;
}

/* ---- SMILE STORIES SECTION ---- */
.smile-stories {
    background-color: var(--bg-teal-light);
    padding: var(--space-xxl) 0;
    position: relative;
    overflow: hidden;
}

.smile-stories::before {
    content: '';
    position: absolute;
    top: -10%;
    right: -5%;
    width: 300px;
    height: 300px;
    border-radius: 50%;
    background: linear-gradient(135deg, rgba(242, 156, 116, 0.2), rgba(249, 167, 95, 0.2));
    z-index: 0;
}

.smile-stories::after {
    content: '';
    position: absolute;
    bottom: -10%;
    left: -5%;
    width: 250px;
    height: 250px;
    border-radius: 50%;
    background: linear-gradient(135deg, rgba(164, 217, 228, 0.2), rgba(197, 230, 220, 0.2));
    z-index: 0;
}

.stories-header {
    font-size: 2.5rem;
    color: var(--primary-blue);
    margin-bottom: var(--space-xxl);
    text-align: center;
    position: relative;
    z-index: 1;
}

.stories-header::after {
    content: '';
    position: absolute;
    width: 100px;
    height: 3px;
    background: var(--primary-orange);
    bottom: -15px;
    left: 50%;
    transform: translateX(-50%);
}

.stories-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--space-xl);
    position: relative;
    z-index: 1;
}

.story-card {
    background-color: var(--text-white);
    border-radius: var(--radius-lg);
    overflow: hidden;
    box-shadow: var(--shadow-medium);
    transition: all var(--transition-medium);
    transform: translateY(0);
}

.story-card:hover {
    transform: translateY(-10px);
    box-shadow: var(--shadow-hard);
}

.story-image {
    height: 200px;
    overflow: hidden;
}

.story-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform var(--transition-medium);
}

.story-card:hover .story-image img {
    transform: scale(1.1);
}

.story-content {
    padding: var(--space-xl);
}

.story-content h3 {
    color: var(--primary-blue);
    margin-bottom: var(--space-md);
    position: relative;
    padding-bottom: var(--space-sm);
}

.story-content h3::after {
    content: '';
    position: absolute;
    width: 50px;
    height: 2px;
    background: var(--primary-orange);
    bottom: 0;
    left: 0;
}

.story-content p {
    color: var(--text-medium);
    margin-bottom: var(--space-lg);
    font-size: 0.95rem;
}

.story-card .cta-button {
    padding: var(--space-sm) var(--space-lg);
    font-size: 0.9rem;
}

/* ---- SPECIALIST SECTION ---- */
.specialist {
    padding: var(--space-xxl) 0;
    background-color: var(--bg-cream);
    text-align: center;
    position: relative;
}

.specialist::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: 
        radial-gradient(circle at 20% 20%, rgba(74, 123, 168, 0.05) 0%, transparent 30%),
        radial-gradient(circle at 80% 80%, rgba(242, 156, 116, 0.05) 0%, transparent 30%);
    z-index: 0;
}

.specialist h2 {
    font-size: 2.5rem;
    color: var(--primary-blue);
    margin-bottom: var(--space-xl);
    position: relative;
    z-index: 1;
}

.specialist-search {
    max-width: 600px;
    margin: 0 auto;
    display: flex;
    gap: var(--space-sm);
    position: relative;
    z-index: 1;
}

.specialist-search input {
    flex: 1;
    padding: var(--space-md) var(--space-lg);
    border-radius: var(--radius-full);
    border: 2px solid transparent;
    background-color: var(--bg-cream-dark);
    font-size: 1rem;
    outline: none;
    transition: all var(--transition-medium);
}

.specialist-search input:focus {
    border-color: var(--primary-blue-light);
    background-color: var(--text-white);
    box-shadow: 0 0 0 4px rgba(56, 96, 136, 0.1);
}

.specialist-search input::placeholder {
    color: var(--text-light);
}

/* ---- FOOTER ---- */
footer {
    background-color: var(--primary-blue);
    color: var(--text-white);
    padding: var(--space-xxl) 0 var(--space-lg);
    position: relative;
    overflow: hidden;
}

footer::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: 
        radial-gradient(circle at 10% 10%, rgba(74, 123, 168, 0.6) 0%, transparent 30%),
        radial-gradient(circle at 90% 90%, rgba(42, 75, 106, 0.6) 0%, transparent 30%);
    z-index: 0;
}

.footer-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--space-xl);
    position: relative;
    z-index: 1;
}

.footer-section h3 {
    margin-top: 0;
    font-size: 1.2rem;
    border-bottom: 2px solid var(--primary-orange);
    padding-bottom: var(--space-sm);
    display: inline-block;
    margin-bottom: var(--space-lg);
}

.footer-section ul {
    list-style: none;
    padding: 0;
}

.footer-section ul li {
    margin-bottom: var(--space-md);
}

.footer-section ul li a {
    color: rgba(255, 255, 255, 0.8);
    transition: all var(--transition-medium);
    position: relative;
    padding-left: var(--space-md);
}

.footer-section ul li a::before {
    content: '›';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    color: var(--primary-orange);
    opacity: 0;
    transition: all var(--transition-medium);
}

.footer-section ul li a:hover {
    color: var(--text-white);
    padding-left: var(--space-lg);
}

.footer-section ul li a:hover::before {
    opacity: 1;
}

.footer-bottom {
    text-align: center;
    padding-top: var(--space-xl);
    margin-top: var(--space-xl);
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    position: relative;
    z-index: 1;
}

.footer-bottom p {
    color: rgba(255, 255, 255, 0.6);
    font-size: 0.9rem;
}

/* ---- SCROLL TO TOP BUTTON ---- */
.scroll-top {
    position: fixed;
    bottom: 30px;
    right: 30px;
    width: 50px;
    height: 50px;
    background-color: var(--primary-orange);
    color: var(--text-white);
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: var(--shadow-medium);
    cursor: pointer;
    opacity: 0;
    transform: translateY(20px);
    transition: all var(--transition-medium);
    z-index: 999;
}

.scroll-top.visible {
    opacity: 1;
    transform: translateY(0);
}

.scroll-top:hover {
    background-color: var(--primary-orange-dark);
    transform: translateY(-5px);
}

/* ---- RESPONSIVE STYLES ---- */
@media (max-width: 1024px) {
    html {
        font-size: 15px;
    }
    
    .hero-text h1 {
        font-size: 3rem;
    }
    
    .options-grid {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media (max-width: 768px) {
    html {
        font-size: 14px;
    }
    
    .hero-content {
        flex-direction: column;
        text-align: center;
    }
    
    .hero-text, .hero-image {
        width: 100%;
        max-width: 100%;
    }
    
    .hero-text h1 {
        font-size: 2.5rem;
    }
    
    .hero-image {
        margin-top: var(--space-xl);
        max-width: 400px;
    }
    
    nav {
        display: none;
    }
    
    .mobile-menu-btn {
        display: block;
    }
    
    .mobile-nav {
        position: fixed;
        top: 0;
        right: -300px;
        width: 300px;
        height: 100vh;
        background-color: var(--bg-cream);
        box-shadow: var(--shadow-hard);
        padding: var(--space-xxl) var(--space-lg);
        transition: right var(--transition-medium);
        z-index: 1001;
    }
    
    .mobile-nav.open {
        right: 0;
    }
    
    .mobile-nav ul {
        flex-direction: column;
        gap: var(--space-xl);
    }
    
    .footer-container {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media (max-width: 576px) {
    .options-grid {
        grid-template-columns: 1fr;
    }
    
    .footer-container {
        grid-template-columns: 1fr;
    }
    
    .scroll-top {
        width: 40px;
        height: 40px;
        bottom: 20px;
        right: 20px;
    }
}

/* ---- PRELOADER ---- */
.preloader {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--bg-cream);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    transition: opacity var(--transition-medium);
}

.preloader.hidden {
    opacity: 0;
    pointer-events: none;
}

.loader {
    width: 80px;
    height: 80px;
    position: relative;
}

.loader:before, .loader:after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: var(--primary-orange);
    opacity: 0.6;
    animation: pulse 2s infinite alternate ease-in-out;
}

.loader:after {
    animation-delay: 1s;
}

/* ---- THEME SWITCHER ---- */
.theme-switch {
    position: fixed;
    top: 100px;
    right: 30px;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: var(--bg-cream-dark);
    box-shadow: var(--shadow-medium);
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    z-index: 999;
    transition: all var(--transition-medium);
}

.theme-switch:hover {
    transform: rotate(30deg);
}

.theme-switch i {
    color: var(--primary-blue);
    font-size: 1.2rem;
}

/* Dark Theme Variables */
body.dark-theme {
    --bg-cream: #1e2a38;
    --bg-cream-dark: #17212e;
    --bg-teal-light: #28394c;
    --bg-blue-light: #203244;
    --text-dark: #e0e6ed;
    --text-medium: #b0bdcb;
    --text-light: #8494a7;
}

/* Advanced Features */
.parallax {
    transform: translateZ(0);
    backface-visibility: hidden;
    will-change: transform;
}

.tilt-effect {
    transform-style: preserve-3d;
    perspective: 1000px;
}

.text-gradient {
    background: linear-gradient(135deg, var(--primary-blue), var(--primary-orange));
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    font-weight: 600;
}

.glass-effect {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
}

/* AOS (Animate On Scroll) Equivalent */
[data-aos] {
    opacity: 0;
    transition: all var(--transition-slow);
}

[data-aos="fade-up"] {
    transform: translateY(30px);
}

[data-aos="fade-down"] {
    transform: translateY(-30px);
}

[data-aos="fade-right"] {
    transform: translateX(-30px);
}

[data-aos="fade-left"] {
    transform: translateX(30px);
}

[data-aos="zoom-in"] {
    transform: scale(0.9);
}

[data-aos].aos-animate {
    opacity: 1;
    transform: translate(0) scale(1);
}

/* Advanced Hover Effects */
.hover-float:hover {
    transform: translateY(-10px);
    transition: transform var(--transition-medium);
}

.hover-scale:hover {
    transform: scale(1.05);
    transition: transform var(--transition-medium);
}

.hover-rotate:hover {
    transform: rotate(5deg);
    transition: transform var(--transition-medium);
}

.hover-blur {
    filter: blur(0);
    transition: filter var(--transition-medium);
}

.hover-blur:hover {
    filter: blur(2px);
}

/* Cursor Effects */
.custom-cursor {
    position: fixed;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background-color: var(--primary-orange);
    transform: translate(-50%, -50%);
    pointer-events: none;
    opacity: 0.5;
    z-index: 9999;
    transition: width 0.2s, height 0.2s, opacity 0.2s;
    mix-blend-mode: difference;
}

.custom-cursor.active {
    width: 50px;
    height: 50px;
    opacity: 0.2;
}

/* ---- MICRO-INTERACTIONS ---- */
/* Button ripple effect */
.ripple-effect {
    position: relative;
    overflow: hidden;
}

.ripple-effect:after {
    content: "";
    display: block;
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    pointer-events: none;
    background-image: radial-gradient(circle, #fff 10%, transparent 10.01%);
    background-repeat: no-repeat;
    background-position: 50%;
    transform: scale(10, 10);
    opacity: 0;
    transition: transform 0.5s, opacity 0.5s;
}

.ripple-effect:active:after {
    transform: scale(0, 0);
    opacity: 0.3;
    transition: 0s;
}

/* Hover image zoom */
.zoom-container {
    overflow: hidden;
    border-radius: var(--radius-lg);
}

.zoom-container img {
    transition: transform var(--transition-medium);
}

.zoom-container:hover img {
    transform: scale(1.1);
}

/* ---- INNOVATIVE COMPONENTS ---- */
/* Tooltip Component */
.tooltip {
    position: relative;
    display: inline-block;
}

.tooltip .tooltip-text {
    visibility: hidden;
    width: 200px;
    background-color: var(--primary-blue);
    color: var(--text-white);
    text-align: center;
    border-radius: var(--radius-md);
    padding: var(--space-md);
    position: absolute;
    z-index: 1;
    bottom: 125%;
    left: 50%;
    transform: translateX(-50%);
    opacity: 0;
    transition: opacity var(--transition-medium), transform var(--transition-medium);
    box-shadow: var(--shadow-medium);
    font-size: 0.9rem;
}

.tooltip .tooltip-text::after {
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    margin-left: -10px;
    border-width: 10px;
    border-style: solid;
    border-color: var(--primary-blue) transparent transparent transparent;
}

.tooltip:hover .tooltip-text {
    visibility: visible;
    opacity: 1;
    transform: translateX(-50%) translateY(-10px);
}

/* Tab Component */
.tabs {
    display: flex;
    flex-direction: column;
    width: 100%;
}

.tab-buttons {
    display: flex;
    gap: var(--space-xs);
    border-bottom: 2px solid rgba(56, 96, 136, 0.1);
    margin-bottom: var(--space-lg);
}

.tab-button {
    padding: var(--space-md) var(--space-lg);
    border: none;
    background: none;
    color: var(--text-medium);
    font-weight: 500;
    cursor: pointer;
    position: relative;
    transition: all var(--transition-medium);
}

.tab-button::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 0;
    height: 2px;
    background-color: var(--primary-orange);
    transition: width var(--transition-medium);
}

.tab-button.active {
    color: var(--primary-blue);
}

.tab-button.active::after {
    width: 100%;
}

.tab-content {
    display: none;
    animation: fadeIn var(--transition-medium);
}

.tab-content.active {
    display: block;
}

/* Accordion Component */
.accordion {
    width: 100%;
    margin-bottom: var(--space-md);
    border-radius: var(--radius-md);
    overflow: hidden;
    box-shadow: var(--shadow-soft);
}

.accordion-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-lg);
    background-color: var(--bg-cream-dark);
    color: var(--primary-blue);
    font-weight: 600;
    cursor: pointer;
    transition: all var(--transition-medium);
}

.accordion-header:hover {
    background-color: rgba(56, 96, 136, 0.1);
}

.accordion-icon {
    transition: transform var(--transition-medium);
}

.accordion.active .accordion-icon {
    transform: rotate(180deg);
}

.accordion-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height var(--transition-medium);
    background-color: var(--text-white);
}

.accordion.active .accordion-content {
    max-height: 500px;
}

.accordion-inner {
    padding: var(--space-lg);
    color: var(--text-medium);
}

/* ---- ADVANCED CARD STYLES ---- */
.card-3d {
    position: relative;
    transition: transform 0.6s;
    transform-style: preserve-3d;
}

.card-3d-front,
.card-3d-back {
    position: absolute;
    backface-visibility: hidden;
    border-radius: var(--radius-lg);
    overflow: hidden;
    width: 100%;
    height: 100%;
}

.card-3d-back {
    transform: rotateY(180deg);
    background-color: var(--primary-blue-light);
    display: flex;
    justify-content: center;
    align-items: center;
    padding: var(--space-lg);
    color: var(--text-white);
}

.card-3d:hover {
    transform: rotateY(180deg);
}

/* ---- ANIMATIONS FOR PAGE ELEMENTS ---- */
/* Staggered animation for list items */
.stagger-list li {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp var(--transition-medium) forwards;
}

.stagger-list li:nth-child(1) { animation-delay: 0.1s; }
.stagger-list li:nth-child(2) { animation-delay: 0.2s; }
.stagger-list li:nth-child(3) { animation-delay: 0.3s; }
.stagger-list li:nth-child(4) { animation-delay: 0.4s; }
.stagger-list li:nth-child(5) { animation-delay: 0.5s; }
.stagger-list li:nth-child(6) { animation-delay: 0.6s; }

@keyframes fadeInUp {
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Text reveal animation */
.reveal-text {
    position: relative;
    overflow: hidden;
    display: inline-block;
}

.reveal-text span {
    display: block;
    transform: translateY(100%);
    animation: revealText 0.8s forwards;
}

@keyframes revealText {
    to {
        transform: translateY(0);
    }
}

/* Typing effect */
.typing-effect {
    overflow: hidden;
    border-right: 2px solid var(--primary-orange);
    white-space: nowrap;
    margin: 0 auto;
    animation: 
        typing 3.5s steps(40, end),
        blink-caret 0.75s step-end infinite;
}

@keyframes typing {
    from { width: 0 }
    to { width: 100% }
}

@keyframes blink-caret {
    from, to { border-color: transparent }
    50% { border-color: var(--primary-orange) }
}

/* ---- ADVANCED SCROLL EFFECTS ---- */
/* Parallax scrolling */
.parallax-section {
    position: relative;
    height: 500px;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
}

.parallax-bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 120%;
    background-size: cover;
    background-position: center;
    z-index: -1;
    transform: translateZ(-1px) scale(2);
}

.parallax-content {
    z-index: 1;
    max-width: 800px;
    padding: var(--space-xxl);
    background-color: rgba(255, 248, 232, 0.9);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-hard);
    backdrop-filter: blur(10px);
}

/* Scroll-triggered animations */
.scroll-animation {
    opacity: 0;
    transform: translateY(30px);
    transition: all var(--transition-slow);
}

.scroll-animation.visible {
    opacity: 1;
    transform: translateY(0);
}

/* Intersection Observer animations */
.fade-in-section {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 1s ease-out, transform 1s ease-out;
}

.fade-in-section.is-visible {
    opacity: 1;
    transform: translateY(0);
}

/* ---- PERSONALIZATION FEATURES ---- */
/* Color theme selector */
.color-options {
    display: flex;
    gap: var(--space-sm);
    margin-top: var(--space-md);
}

.color-option {
    width: 25px;
    height: 25px;
    border-radius: 50%;
    cursor: pointer;
    transition: transform var(--transition-medium);
    box-shadow: var(--shadow-soft);
}

.color-option:hover {
    transform: scale(1.2);
}

.color-option.active {
    outline: 2px solid var(--text-white);
    outline-offset: 2px;
}

/* Theme variables for different color schemes */
body.theme-blue {
    --primary-blue: #4a6fa5;
    --primary-orange: #ff9e7d;
    --accent-yellow: #ffb55a;
}

body.theme-green {
    --primary-blue: #2e8b57;
    --primary-orange: #ff7f50;
    --accent-yellow: #ffd700;
}

body.theme-purple {
    --primary-blue: #8a2be2;
    --primary-orange: #ff6b6b;
    --accent-yellow: #ffa500;
}

/* Font size adjuster */
.font-size-adjuster {
    display: flex;
    align-items: center;
    gap: var(--space-md);
    margin-top: var(--space-md);
}

.font-size-btn {
    width: 30px;
    height: 30px;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: var(--bg-cream-dark);
    border-radius: 50%;
    color: var(--primary-blue);
    cursor: pointer;
    transition: all var(--transition-medium);
}

.font-size-btn:hover {
    background-color: var(--primary-blue);
    color: var(--text-white);
}

/* High contrast mode */
body.high-contrast {
    --primary-blue: #000000;
    --primary-orange: #ffffff;
    --text-dark: #000000;
    --text-medium: #333333;
    --text-light: #666666;
    --bg-cream: #ffffff;
    --bg-cream-dark: #f0f0f0;
}

/* ---- ACCESSIBILITY ENHANCEMENTS ---- */
/* Skip to content link */
.skip-link {
    position: absolute;
    top: -50px;
    left: 0;
    padding: var(--space-md);
    background-color: var(--primary-blue);
    color: var(--text-white);
    z-index: 9999;
    transition: top var(--transition-medium);
}

.skip-link:focus {
    top: 0;
}

/* Focus styles */
*:focus-visible {
    outline: 3px solid var(--primary-orange);
    outline-offset: 3px;
}

/* Reduced motion preference */
@media (prefers-reduced-motion: reduce) {
    * {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
        scroll-behavior: auto !important;
    }
}

/* ---- PERFORMANCE OPTIMIZATIONS ---- */
/* Optimized image loading */
.lazy-image {
    background-color: var(--bg-cream-dark);
    background-size: cover;
    background-repeat: no-repeat;
    position: relative;
    overflow: hidden;
}

.lazy-image::before {
    content: "";
    display: block;
    height: 0;
    width: 0;
    padding-bottom: calc(100% * 3/4); /* 4:3 Aspect Ratio */
}

.lazy-image img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: block;
    object-fit: cover;
    opacity: 0;
    transition: opacity var(--transition-medium);
}

.lazy-image img.loaded {
    opacity: 1;
}

.lazy-image .placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.2) 50%, rgba(255,255,255,0) 100%);
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
}

/* ---- PRINT STYLES ---- */
@media print {
    body {
        background-color: #ffffff;
        color: #000000;
    }
    
    header, footer, .cta-button, .scroll-top, .theme-switch {
        display: none;
    }
    
    main {
        width: 100%;
        padding: 0;
        margin: 0;
    }
    
    a {
        text-decoration: underline;
        color: #000000;
    }
    
    .hero, .dental-implants, .smile-stories, .specialist {
        background: none;
        padding: var(--space-lg) 0;
        page-break-inside: avoid;
    }
    
    .hero-image, .story-image {
        max-width: 300px;
        margin: 0 auto;
    }
    
    .options-grid {
        display: block;
    }
    
    .option-button {
        display: inline-block;
        margin: var(--space-xs);
        border: 1px solid #000000;
        background: none;
    }
}

/* ---- PROGRESSIVE ENHANCEMENT ---- */
/* CSS variables fallback for older browsers */
:root {
    --primary-blue: #386088;
    /* Fallbacks */
    background-color: #fff8e8;
    color: #2d3c4e;
}

/* Feature detection */
@supports (display: grid) {
    .grid-fallback {
        display: none;
    }
}

@supports not (display: grid) {
    .grid-container {
        display: none;
    }
    
    .grid-fallback {
        display: block;
    }
}

/* ---- CUSTOM SCROLLBAR ---- */
::-webkit-scrollbar {
    width: 12px;
}

::-webkit-scrollbar-track {
    background: var(--bg-cream-dark);
}

::-webkit-scrollbar-thumb {
    background: var(--primary-blue-light);
    border-radius: var(--radius-full);
    border: 3px solid var(--bg-cream-dark);
}

::-webkit-scrollbar-thumb:hover {
    background: var(--primary-blue);
}

/* ---- SECRET SAUCE ---- */
/* Magic animation for logo */
.logo svg path {
    stroke-dasharray: 1000;
    stroke-dashoffset: 1000;
    animation: dash 3s ease forwards;
}

@keyframes dash {
    to {
        stroke-dashoffset: 0;
    }
}

/* Breathe life into the page */
.breathe {
    animation: breathe 5s ease-in-out infinite;
}

@keyframes breathe {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.03); }
}

/* Gorgeous text shadow for headings */
.hero-text h1, .dental-content h2, .stories-header, .specialist h2 {
    text-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1),
                 0px 4px 20px rgba(56, 96, 136, 0.2);
}

/* ---- FINAL TOUCHES ---- */
/* Subtle texture overlay */
body::after {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    opacity: 0.03;
    z-index: 9998;
    background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23386088' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E");
}

/* Touch of sizzle */
.sizzle {
    position: relative;
    overflow: hidden;
}

.sizzle::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(
        to bottom,
        rgba(255, 255, 255, 0) 0%,
        rgba(255, 255, 255, 0.3) 50%,
        rgba(255, 255, 255, 0) 100%
    );
    transform: rotate(30deg);
    animation: sizzle 6s linear infinite;
    opacity: 0;
    transition: opacity var(--transition-medium);
}

.sizzle:hover::after {
    opacity: 1;
}

@keyframes sizzle {
    from { transform: translateX(-100%) rotate(45deg); }
    to { transform: translateX(100%) rotate(45deg); }
}

/* JavaScript interactions */
document.addEventListener('DOMContentLoaded', function() {
    // Initialize animations
    const scrollElements = document.querySelectorAll('.scroll-animation');
    const scrollTop = document.querySelector('.scroll-top');
    const header = document.querySelector('header');
    
    // Scroll animations
    function handleScrollAnimations() {
        scrollElements.forEach(element => {
            if (isElementInViewport(element)) {
                element.classList.add('visible');
            }
        });
        
        if (window.scrollY > 300) {
            scrollTop.classList.add('visible');
            header.classList.add('scrolled');
        } else {
            scrollTop.classList.remove('visible');
            header.classList.remove('scrolled');
        }
    }
    
    // Check if element is in viewport
    function isElementInViewport(el) {
        const rect = el.getBoundingClientRect();
        return (
            rect.top <= (window.innerHeight || document.documentElement.clientHeight) * 0.8 &&
            rect.bottom >= 0
        );
    }
    
    // Event listeners
    window.addEventListener('scroll', handleScrollAnimations);
    window.addEventListener('resize', handleScrollAnimations);
    
    // Initialize
    setTimeout(handleScrollAnimations, 100);
});
/**
 * The New Smile Guide - Interactive JavaScript
 * Version: 1.0
 * 
 * This script enhances The New Smile Guide website with smooth animations,
 * interactive elements, and performance optimizations to create an
 * award-winning user experience.
 */

 // Wait for the DOM to be fully loaded before running scripts
 document.addEventListener('DOMContentLoaded', function() {
     // Initialize all components
     initPreloader();
     initScrollEffects();
     initAnimations();
     initInteractiveElements();
     initAccessibilityFeatures();
     initPerformanceOptimizations();
 });
 
 /**
  * Preloader Animation
  * Displays an elegant loading animation until the page is fully loaded
  */
 function initPreloader() {
     const preloader = document.createElement('div');
     preloader.className = 'preloader';
     preloader.innerHTML = '<div class="loader"></div>';
     document.body.prepend(preloader);
 
     // Hide preloader once page is loaded
     window.addEventListener('load', () => {
         setTimeout(() => {
             preloader.classList.add('hidden');
             // Remove preloader from DOM after animation completes
             setTimeout(() => {
                 preloader.remove();
             }, 500);
         }, 800);
     });
 }
 
 /**
  * Scroll Effects
  * Handles scroll-triggered animations and effects
  */
 function initScrollEffects() {
     // Elements to animate on scroll
     const animatedElements = document.querySelectorAll('.scroll-animation, [data-aos]');
     
     // Header scroll effect
     const header = document.querySelector('header');
     
     // Scroll to top button
     const scrollTopBtn = document.createElement('div');
     scrollTopBtn.className = 'scroll-top';
     scrollTopBtn.innerHTML = '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="18 15 12 9 6 15"></polyline></svg>';
     document.body.appendChild(scrollTopBtn);
     
     // Handle scroll events
     window.addEventListener('scroll', throttle(() => {
         // Header shrink effect
         if (window.scrollY > 50) {
             header.classList.add('scrolled');
         } else {
             header.classList.remove('scrolled');
         }
         
         // Scroll to top button visibility
         if (window.scrollY > 300) {
             scrollTopBtn.classList.add('visible');
         } else {
             scrollTopBtn.classList.remove('visible');
         }
         
         // Reveal elements when scrolled into view
         animatedElements.forEach(element => {
             if (isElementInViewport(element)) {
                 element.classList.add('aos-animate');
                 element.classList.add('visible');
             }
         });
     }, 100));
     
     // Scroll to top button click handler
     scrollTopBtn.addEventListener('click', () => {
         window.scrollTo({
             top: 0,
             behavior: 'smooth'
         });
     });
     
     // Smooth scroll for anchor links
     document.querySelectorAll('a[href^="#"]').forEach(anchor => {
         anchor.addEventListener('click', function(e) {
             e.preventDefault();
             
             const targetId = this.getAttribute('href');
             if (targetId === '#') return;
             
             const targetElement = document.querySelector(targetId);
             if (targetElement) {
                 targetElement.scrollIntoView({
                     behavior: 'smooth',
                     block: 'start'
                 });
             }
         });
     });
 }
 
 /**
  * Animations
  * Sets up various animations and effects throughout the site
  */
 function initAnimations() {
     // Hero text typing effect
     const heroText = document.querySelector('.hero-text h1');
     if (heroText) {
         const originalText = heroText.textContent;
         heroText.innerHTML = '';
         heroText.classList.add('typing-effect');
         
         // Animated text reveal
         setTimeout(() => {
             heroText.textContent = originalText;
             heroText.classList.remove('typing-effect');
             heroText.classList.add('reveal-text');
             heroText.innerHTML = `<span>${originalText}</span>`;
         }, 1000);
     }
     
     // Staggered animation for navigation items
     const navItems = document.querySelectorAll('nav ul li');
     navItems.forEach((item, index) => {
         item.style.opacity = '0';
         item.style.transform = 'translateY(-20px)';
         
         setTimeout(() => {
             item.style.transition = 'all 0.5s ease';
             item.style.opacity = '1';
             item.style.transform = 'translateY(0)';
         }, 100 + (index * 100));
     });
     
     // Parallax effect for hero section
     const hero = document.querySelector('.hero');
     if (hero) {
         window.addEventListener('scroll', throttle(() => {
             const scrollPosition = window.scrollY;
             const heroHeight = hero.offsetHeight;
             const parallaxSpeed = 0.4;
             
             if (scrollPosition <= heroHeight) {
                 const translateY = scrollPosition * parallaxSpeed;
                 hero.style.backgroundPositionY = `${translateY}px`;
             }
         }, 10));
     }
     
     // Breathe animation for cards
     document.querySelectorAll('.story-card, .option-button').forEach(item => {
         item.classList.add('breathe');
     });
     
     // Initialize logo animation
     const logo = document.querySelector('.logo');
     if (logo) {
         logo.addEventListener('mouseenter', () => {
             logo.classList.add('sizzle');
         });
         
         logo.addEventListener('mouseleave', () => {
             setTimeout(() => {
                 logo.classList.remove('sizzle');
             }, 500);
         });
     }
 }
 
 /**
  * Interactive Elements
  * Sets up interactive components like tabs, accordions, tooltips
  */
 function initInteractiveElements() {
     // Initialize tabs
     initTabs();
     
     // Initialize accordions
     initAccordions();
     
     // Initialize tooltips
     initTooltips();
     
     // Initialize 3D card effects
     init3DCards();
     
     // Initialize custom cursor
     initCustomCursor();
     
     // Add ripple effect to buttons
     document.querySelectorAll('.cta-button, .option-button').forEach(button => {
         button.classList.add('ripple-effect');
     });
     
     // Initialize mobile menu
     initMobileMenu();
     
     // Initialize theme switcher
     initThemeSwitcher();
 }
 
 /**
  * Tabs Component
  * Creates interactive tabbed content areas
  */
 function initTabs() {
     document.querySelectorAll('.tabs').forEach(tabsContainer => {
         const tabButtons = tabsContainer.querySelectorAll('.tab-button');
         const tabContents = tabsContainer.querySelectorAll('.tab-content');
         
         // Set first tab as active by default
         if (tabButtons.length > 0) {
             tabButtons[0].classList.add('active');
         }
         
         if (tabContents.length > 0) {
             tabContents[0].classList.add('active');
         }
         
         // Add click event listeners to tab buttons
         tabButtons.forEach((button, index) => {
             button.addEventListener('click', () => {
                 // Remove active class from all buttons and contents
                 tabButtons.forEach(btn => btn.classList.remove('active'));
                 tabContents.forEach(content => content.classList.remove('active'));
                 
                 // Add active class to current button and content
                 button.classList.add('active');
                 if (tabContents[index]) {
                     tabContents[index].classList.add('active');
                 }
             });
         });
     });
 }
 
 /**
  * Accordions Component
  * Creates collapsible content sections
  */
 function initAccordions() {
     document.querySelectorAll('.accordion').forEach(accordion => {
         const header = accordion.querySelector('.accordion-header');
         const content = accordion.querySelector('.accordion-content');
         
         if (header && content) {
             header.addEventListener('click', () => {
                 accordion.classList.toggle('active');
                 
                 if (accordion.classList.contains('active')) {
                     content.style.maxHeight = content.scrollHeight + 'px';
                 } else {
                     content.style.maxHeight = '0';
                 }
             });
         }
     });
 }
 
 /**
  * Tooltips Component
  * Adds informational tooltips to elements
  */
 function initTooltips() {
     document.querySelectorAll('[data-tooltip]').forEach(element => {
         const tooltipText = element.getAttribute('data-tooltip');
         
         // Create tooltip element
         const tooltip = document.createElement('span');
         tooltip.className = 'tooltip-text';
         tooltip.textContent = tooltipText;
         
         // Add tooltip element to container
         element.classList.add('tooltip');
         element.appendChild(tooltip);
     });
 }
 
 /**
  * 3D Card Effects
  * Adds interactive 3D tilt effects to cards
  */
 function init3DCards() {
     document.querySelectorAll('.card-3d').forEach(card => {
         card.addEventListener('mousemove', e => {
             const cardRect = card.getBoundingClientRect();
             const cardCenterX = cardRect.left + cardRect.width / 2;
             const cardCenterY = cardRect.top + cardRect.height / 2;
             
             // Calculate mouse position relative to card center
             const mouseX = e.clientX - cardCenterX;
             const mouseY = e.clientY - cardCenterY;
             
             // Calculate rotation values (limited to ±15 degrees)
             const rotateY = mouseX * 0.03;
             const rotateX = -mouseY * 0.03;
             
             // Apply transform
             card.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
         });
         
         // Reset transform on mouse leave
         card.addEventListener('mouseleave', () => {
             card.style.transform = 'perspective(1000px) rotateX(0) rotateY(0)';
         });
     });
 }
 
 /**
  * Custom Cursor
  * Creates a custom cursor that follows mouse movement
  */
 function initCustomCursor() {
     // Create custom cursor element
     const cursor = document.createElement('div');
     cursor.className = 'custom-cursor';
     document.body.appendChild(cursor);
     
     // Update cursor position on mouse move
     document.addEventListener('mousemove', e => {
         cursor.style.left = e.clientX + 'px';
         cursor.style.top = e.clientY + 'px';
     });
     
     // Add active class on mouse down
     document.addEventListener('mousedown', () => {
         cursor.classList.add('active');
     });
     
     // Remove active class on mouse up
     document.addEventListener('mouseup', () => {
         cursor.classList.remove('active');
     });
     
     // Hide cursor when mouse leaves window
     document.addEventListener('mouseleave', () => {
         cursor.style.opacity = '0';
     });
     
     // Show cursor when mouse enters window
     document.addEventListener('mouseenter', () => {
         cursor.style.opacity = '0.5';
     });
     
     // Change cursor appearance when hovering over links and buttons
     document.querySelectorAll('a, button, .option-button, .cta-button').forEach(element => {
         element.addEventListener('mouseenter', () => {
             cursor.classList.add('active');
         });
         
         element.addEventListener('mouseleave', () => {
             cursor.classList.remove('active');
         });
     });
 }
 
 /**
  * Mobile Menu
  * Creates a responsive mobile navigation menu
  */
 function initMobileMenu() {
     const navContainer = document.querySelector('.nav-container');
     const nav = document.querySelector('nav');
     
     if (navContainer && nav) {
         // Create mobile menu button
         const mobileMenuBtn = document.createElement('button');
         mobileMenuBtn.className = 'mobile-menu-btn';
         mobileMenuBtn.innerHTML = '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg>';
         
         // Create mobile nav container
         const mobileNav = document.createElement('div');
         mobileNav.className = 'mobile-nav';
         mobileNav.appendChild(nav.cloneNode(true));
         
         // Create close button
         const closeBtn = document.createElement('button');
         closeBtn.className = 'mobile-menu-close';
         closeBtn.innerHTML = '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>';
         mobileNav.prepend(closeBtn);
         
         // Append elements to DOM
         navContainer.appendChild(mobileMenuBtn);
         document.body.appendChild(mobileNav);
         
         // Toggle mobile menu
         mobileMenuBtn.addEventListener('click', () => {
             mobileNav.classList.add('open');
             document.body.style.overflow = 'hidden';
         });
         
         // Close mobile menu
         closeBtn.addEventListener('click', () => {
             mobileNav.classList.remove('open');
             document.body.style.overflow = '';
         });
         
         // Close menu when clicking on mobile nav links
         mobileNav.querySelectorAll('a').forEach(link => {
             link.addEventListener('click', () => {
                 mobileNav.classList.remove('open');
                 document.body.style.overflow = '';
             });
         });
         
         // Close menu when clicking outside
         document.addEventListener('click', e => {
             if (!mobileNav.contains(e.target) && e.target !== mobileMenuBtn) {
                 mobileNav.classList.remove('open');
                 document.body.style.overflow = '';
             }
         });
     }
 }
 
 /**
  * Theme Switcher
  * Allows users to toggle between light and dark themes
  */
 function initThemeSwitcher() {
     // Create theme switch button
     const themeSwitch = document.createElement('div');
     themeSwitch.className = 'theme-switch';
     themeSwitch.innerHTML = '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="5"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line x1="21" y1="12" x2="23" y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line></svg>';
     document.body.appendChild(themeSwitch);
     
     // Check for saved theme preference
     const savedTheme = localStorage.getItem('theme');
     if (savedTheme === 'dark') {
         document.body.classList.add('dark-theme');
         themeSwitch.innerHTML = '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path></svg>';
     }
     
     // Toggle theme on button click
     themeSwitch.addEventListener('click', () => {
         document.body.classList.toggle('dark-theme');
         
         // Update icon and save preference
         if (document.body.classList.contains('dark-theme')) {
             themeSwitch.innerHTML = '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path></svg>';
             localStorage.setItem('theme', 'dark');
         } else {
             themeSwitch.innerHTML = '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="5"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line x1="21" y1="12" x2="23" y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line></svg>';
             localStorage.setItem('theme', 'light');
         }
     });
 }
 
 /**
  * Accessibility Features
  * Improves site accessibility for all users
  */
 function initAccessibilityFeatures() {
     // Add skip to content link
     const skipLink = document.createElement('a');
     skipLink.className = 'skip-link';
     skipLink.href = '#main';
     skipLink.textContent = 'Skip to content';
     document.body.prepend(skipLink);
     
     // Add ARIA labels to interactive elements without text
     document.querySelectorAll('button:not([aria-label]):not([title])').forEach(button => {
         if (!button.textContent.trim()) {
             button.setAttribute('aria-label', 'Button');
         }
     });
     
     // Add focus trap for modal dialogs
     document.querySelectorAll('.modal').forEach(modal => {
         const focusableElements = modal.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
         const firstFocusable = focusableElements[0];
         const lastFocusable = focusableElements[focusableElements.length - 1];
         
         modal.addEventListener('keydown', e => {
             if (e.key === 'Tab') {
                 if (e.shiftKey && document.activeElement === firstFocusable) {
                     e.preventDefault();
                     lastFocusable.focus();
                 } else if (!e.shiftKey && document.activeElement === lastFocusable) {
                     e.preventDefault();
                     firstFocusable.focus();
                 }
             }
         });
     });
     
     // Add font size adjustment feature
     const fontSizeAdjuster = document.createElement('div');
     fontSizeAdjuster.className = 'font-size-adjuster';
     fontSizeAdjuster.innerHTML = `
         <button class="font-size-btn decrease" aria-label="Decrease font size">A-</button>
         <button class="font-size-btn reset" aria-label="Reset font size">A</button>
         <button class="font-size-btn increase" aria-label="Increase font size">A+</button>
     `;
     
     const currentFontSize = parseFloat(getComputedStyle(document.documentElement).fontSize);
     
     fontSizeAdjuster.querySelector('.decrease').addEventListener('click', () => {
         document.documentElement.style.fontSize = (currentFontSize * 0.9) + 'px';
         localStorage.setItem('fontSize', document.documentElement.style.fontSize);
     });
     
     fontSizeAdjuster.querySelector('.reset').addEventListener('click', () => {
         document.documentElement.style.fontSize = currentFontSize + 'px';
         localStorage.removeItem('fontSize');
     });
     
     fontSizeAdjuster.querySelector('.increase').addEventListener('click', () => {
         document.documentElement.style.fontSize = (currentFontSize * 1.1) + 'px';
         localStorage.setItem('fontSize', document.documentElement.style.fontSize);
     });
     
     // Apply saved font size
     const savedFontSize = localStorage.getItem('fontSize');
     if (savedFontSize) {
         document.documentElement.style.fontSize = savedFontSize;
     }
 }
 
 /**
  * Performance Optimizations
  * Improves site performance and loading speed
  */
 function initPerformanceOptimizations() {
     // Lazy load images
     lazyLoadImages();
     
     // Defer non-critical resources
     deferNonCriticalResources();
 }
 
 /**
  * Lazy Load Images
  * Loads images only when they come into viewport
  */
 function lazyLoadImages() {
     // Create IntersectionObserver if supported
     if ('IntersectionObserver' in window) {
         const imageObserver = new IntersectionObserver((entries, observer) => {
             entries.forEach(entry => {
                 if (entry.isIntersecting) {
                     const img = entry.target;
                     const src = img.getAttribute('data-src');
                     
                     if (src) {
                         img.src = src;
                         img.classList.add('loaded');
                         observer.unobserve(img);
                     }
                 }
             });
         });
         
         // Observe all images with data-src attribute
         document.querySelectorAll('img[data-src]').forEach(img => {
             // Add placeholder wrapper
             const wrapper = document.createElement('div');
             wrapper.className = 'lazy-image';
             img.parentNode.insertBefore(wrapper, img);
             wrapper.appendChild(img);
             
             // Add placeholder animation
             const placeholder = document.createElement('div');
             placeholder.className = 'placeholder';
             wrapper.appendChild(placeholder);
             
             // Observe image
             imageObserver.observe(img);
         });
     } else {
         // Fallback for browsers that don't support IntersectionObserver
         document.querySelectorAll('img[data-src]').forEach(img => {
             img.src = img.getAttribute('data-src');
         });
     }
 }
 
 /**
  * Defer Non-Critical Resources
  * Delays loading of non-essential resources
  */
 function deferNonCriticalResources() {
     // Find all script tags with data-defer attribute
     document.querySelectorAll('script[data-defer]').forEach(script => {
         const src = script.getAttribute('src');
         
         if (src) {
             // Create new script element with defer attribute
             const deferredScript = document.createElement('script');
             deferredScript.src = src;
             deferredScript.defer = true;
             
             // Replace original script with deferred version
             script.parentNode.replaceChild(deferredScript, script);
         }
     });
 }
 
 /**
  * Utility Functions
  */
 
 /**
  * Checks if an element is in the viewport
  * @param {HTMLElement} element - The element to check
  * @param {number} offset - Optional offset to trigger before element is fully visible
  * @returns {boolean} - Whether the element is in viewport
  */
 function isElementInViewport(element, offset = 0) {
     const rect = element.getBoundingClientRect();
     return (
         rect.top <= (window.innerHeight || document.documentElement.clientHeight) - offset &&
         rect.bottom >= 0 &&
         rect.left <= (window.innerWidth || document.documentElement.clientWidth) - offset &&
         rect.right >= 0
     );
 }
 
 /**
  * Throttle function to limit execution rate
  * @param {Function} func - The function to throttle
  * @param {number} limit - Minimum time between executions in milliseconds
  * @returns {Function} - Throttled function
  */
 function throttle(func, limit) {
     let inThrottle;
     return function() {
         const args = arguments;
         const context = this;
         if (!inThrottle) {
             func.apply(context, args);
             inThrottle = true;
             setTimeout(() => inThrottle = false, limit);
         }
     };
 }
 
 /**
  * Debounce function to prevent excessive executions
  * @param {Function} func - The function to debounce
  * @param {number} delay - Delay in milliseconds
  * @returns {Function} - Debounced function
  */
 function debounce(func, delay) {
     let timeoutId;
     return function() {
         const context = this;
         const args = arguments;
         clearTimeout(timeoutId);
         timeoutId = setTimeout(() => {
             func.apply(context, args);
         }, delay);
     };
 }
 
 /**
  * Enhanced JavaScript functionality for dental-specific features
  */
 
 // Initialize interactive dental visualization on page load
 document.addEventListener('DOMContentLoaded', function() {
     initSmileJourneyQuiz();
     initBeforeAfterSlider();
     initDentalProcedureExplainer();
     initSpecialistFinder();
 });
 
 /**
  * Smile Journey Quiz
  * Interactive questionnaire to guide users to appropriate treatments
  */
 function initSmileJourneyQuiz() {
     const quizContainer = document.querySelector('#smile-journey-quiz');
     if (!quizContainer) return;
     
     const questions = [
         {
             id: 'concern',
             text: 'What is your main smile concern?',
             options: [
                 { value: 'missing', text: 'Missing teeth' },
                 { value: 'crooked', text: 'Crooked teeth' },
                 { value: 'discolored', text: 'Discolored teeth' },
                 { value: 'damaged', text: 'Chipped or damaged teeth' },
                 { value: 'gummy', text: 'Gummy smile' }
             ]
         },
         {
             id: 'timeline',
             text: 'What is your ideal timeline for treatment?',
             options: [
                 { value: 'immediate', text: 'As soon as possible (days/weeks)' },
                 { value: 'medium', text: 'Medium term (2-6 months)' },
                 { value: 'longterm', text: 'I\'m comfortable with longer treatment (6+ months)' }
             ]
         },
         {
             id: 'budget',
             text: 'What is your budget range?',
             options: [
                 { value: 'economy', text: 'Economy ($1,000-$3,000)' },
                 { value: 'standard', text: 'Standard ($3,000-$8,000)' },
                 { value: 'premium', text: 'Premium ($8,000+)' }
             ]
         }
     ];
     
     // Generate quiz HTML
     let quizHTML = '<div class="quiz-container">';
     quizHTML += '<h2>Discover Your Ideal Smile Journey</h2>';
     
     questions.forEach((question, qIndex) => {
         quizHTML += `
             <div class="quiz-step" data-step="${qIndex + 1}" ${qIndex > 0 ? 'style="display: none;"' : ''}>
                 <h3>${question.text}</h3>
                 <div class="options-grid quiz-options">
         `;
         
         question.options.forEach(option => {
             quizHTML += `
                 <div class="option-button quiz-option" data-question="${question.id}" data-value="${option.value}">
                     ${option.text}
                 </div>
             `;
         });
         
         quizHTML += `
                 </div>
                 <div class="quiz-navigation">
                     ${qIndex > 0 ? '<button class="quiz-prev">Previous</button>' : ''}
                     ${qIndex < questions.length - 1 ? '' : '<button class="quiz-submit">Get Results</button>'}
                 </div>
             </div>
         `;
     });
     
     // Add results container
     quizHTML += `
         <div class="quiz-results" style="display: none;">
             <h3>Your Personalized Recommendations</h3>
             <div class="results-content"></div>
             <button class="quiz-restart">Start Over</button>
         </div>
     `;
     
     quizHTML += '</div>';
     quizContainer.innerHTML = quizHTML;
     
     // Track user selections
     const userSelections = {};
     
     // Handle option selection
     quizContainer.querySelectorAll('.quiz-option').forEach(option => {
         option.addEventListener('click', function() {
             const question = this.getAttribute('data-question');
             const value = this.getAttribute('data-value');
             
             // Highlight selected option
             const siblings = quizContainer.querySelectorAll(`.quiz-option[data-question="${question}"]`);
             siblings.forEach(sib => sib.classList.remove('selected'));
             this.classList.add('selected');
             
             // Store selection
             userSelections[question] = value;
             
             // Auto-advance to next question after short delay
             const currentStep = this.closest('.quiz-step');
             const currentStepNum = parseInt(currentStep.getAttribute('data-step'));
             const nextStep = quizContainer.querySelector(`.quiz-step[data-step="${currentStepNum + 1}"]`);
             
             if (nextStep) {
                 setTimeout(() => {
                     currentStep.style.display = 'none';
                     nextStep.style.display = 'block';
                 }, 500);
             }
         });
     });
     
     // Handle previous button
     quizContainer.querySelectorAll('.quiz-prev').forEach(button => {
         button.addEventListener('click', function() {
             const currentStep = this.closest('.quiz-step');
             const currentStepNum = parseInt(currentStep.getAttribute('data-step'));
             const prevStep = quizContainer.querySelector(`.quiz-step[data-step="${currentStepNum - 1}"]`);
             
             if (prevStep) {
                 currentStep.style.display = 'none';
                 prevStep.style.display = 'block';
             }
         });
     });
     
     // Handle submit button
     const submitButton = quizContainer.querySelector('.quiz-submit');
     if (submitButton) {
         submitButton.addEventListener('click', function() {
             // Get results container
             const resultsContainer = quizContainer.querySelector('.quiz-results');
             const resultsContent = quizContainer.querySelector('.results-content');
             
             // Hide all steps
             quizContainer.querySelectorAll('.quiz-step').forEach(step => {
                 step.style.display = 'none';
             });
             
             // Generate personalized recommendations based on user selections
             let recommendations = generateRecommendations(userSelections);
             
             // Display results
             resultsContent.innerHTML = recommendations;
             resultsContainer.style.display = 'block';
             
             // Add animation classes
             resultsContainer.classList.add('fade-in-section');
             setTimeout(() => {
                 resultsContainer.classList.add('is-visible');
             }, 100);
         });
     }
     
     // Handle restart button
     const restartButton = quizContainer.querySelector('.quiz-restart');
     if (restartButton) {
         restartButton.addEventListener('click', function() {
             // Reset selections
             Object.keys(userSelections).forEach(key => delete userSelections[key]);
             
             // Reset UI
             quizContainer.querySelectorAll('.quiz-option').forEach(option => {
                 option.classList.remove('selected');
             });
             
             // Hide results
             quizContainer.querySelector('.quiz-results').style.display = 'none';
             
             // Show first step
             quizContainer.querySelector('.quiz-step[data-step="1"]').style.display = 'block';
         });
     }
 }
 
 /**
  * Generate personalized recommendations based on user selections
  * @param {Object} selections - User's quiz selections
  * @returns {string} - HTML content for recommendations
  */
 function generateRecommendations(selections) {
     // Treatment options mapping
     const treatments = {
         'missing': {
             primary: 'Dental Implants',
             alternativeMedium: 'Dental Bridge',
             alternativeBudget: 'Removable Partial Denture'
         },
         'crooked': {
             primary: 'Invisalign® Clear Aligners',
             alternativeMedium: 'Traditional Braces',
             alternativeBudget: 'Limited Orthodontic Treatment'
         },
         'discolored': {
             primary: 'Porcelain Veneers',
             alternativeMedium: 'Professional Whitening',
             alternativeBudget: 'At-Home Whitening Kit'
         },
         'damaged': {
             primary: 'Porcelain Veneers',
             alternativeMedium: 'Dental Bonding',
             alternativeBudget: 'Composite Fillings'
         },
         'gummy': {
             primary: 'Laser Gum Contouring',
             alternativeMedium: 'Porcelain Veneers',
             alternativeBudget: 'Orthodontic Treatment'
         }
     };
     
     const concern = selections.concern || 'missing';
     const timeline = selections.timeline || 'medium';
     const budget = selections.budget || 'standard';
     
     // Determine primary recommendation
     let primaryRecommendation = treatments[concern].primary;
     
     // Adjust based on timeline and budget
     if (timeline === 'immediate' && budget === 'economy') {
         primaryRecommendation = treatments[concern].alternativeBudget;
     } else if (timeline === 'longterm' && budget === 'economy') {
         primaryRecommendation = treatments[concern].alternativeMedium;
     } else if (budget === 'economy') {
         primaryRecommendation = treatments[concern].alternativeBudget;
     }
     
     // Generate HTML
     let html = '<div class="recommendations">';
     
     // Primary recommendation
     html += `
         <div class="recommendation-card primary">
             <h4>Your Ideal Treatment</h4>
             <div class="treatment-name">${primaryRecommendation}</div>
             <p>Based on your concerns about ${getConcernText(concern)} and preferences for ${getTimelineText(timeline)} treatment within a ${getBudgetText(budget)} budget.</p>
             <a href="#${primaryRecommendation.toLowerCase().replace(/[^\w]+/g, '-')}" class="cta-button">Learn More</a>
         </div>
     `;
     
     // Alternative options
     html += '<h4>Alternative Options to Consider</h4><div class="options-grid">';
     
     // Add other treatment options
     Object.values(treatments[concern]).forEach(treatment => {
         if (treatment !== primaryRecommendation) {
             html += `
                 <div class="option-button">
                     <span>${treatment}</span>
                 </div>
             `;
         }
     });
     
     html += '</div>';
     
     // Next steps
     html += `
         <div class="next-steps">
             <h4>Your Next Steps</h4>
             <ol>
                 <li>Learn more about ${primaryRecommendation} in our <a href="#smile-academy">Smile Academy</a></li>
                 <li>Use our <a href="#cost-estimator">Cost Estimator</a> to plan your budget</li>
                 <li>Find a specialist near you with our <a href="#find-specialist">Specialist Finder</a></li>
             </ol>
         </div>
     `;
     
     html += '</div>';
     return html;
 }
 
 /**
  * Get human-readable text for concern selection
  */
 function getConcernText(concern) {
     const concernMap = {
         'missing': 'missing teeth',
         'crooked': 'teeth alignment',
         'discolored': 'tooth discoloration',
         'damaged': 'damaged teeth',
         'gummy': 'gum appearance'
     };
     return concernMap[concern] || concern;
 }
 
 /**
  * Get human-readable text for timeline selection
  */
 function getTimelineText(timeline) {
     const timelineMap = {
         'immediate': 'quick',
         'medium': 'moderate-length',
         'longterm': 'gradual'
     };
     return timelineMap[timeline] || timeline;
 }
 
 /**
  * Get human-readable text for budget selection
  */
 function getBudgetText(budget) {
     const budgetMap = {
         'economy': 'cost-effective',
         'standard': 'standard',
         'premium': 'premium'
     };
     return budgetMap[budget] || budget;
 }
 
 /**
  * Before/After Image Slider
  * Interactive slider to compare dental treatment results
  */
 function initBeforeAfterSlider() {
     const sliders = document.querySelectorAll('.before-after-slider');
     if (!sliders.length) return;
     
     sliders.forEach(slider => {
         // Get image elements
         const beforeImg = slider.querySelector('.before-image');
         const afterImg = slider.querySelector('.after-image');
         
         if (!beforeImg || !afterImg) return;
         
         // Create slider handle
         const sliderHandle = document.createElement('div');
         sliderHandle.className = 'slider-handle';
         sliderHandle.innerHTML = '<div class="handle-circle"></div>';
         
         // Create slider divider
         const sliderDivider = document.createElement('div');
         sliderDivider.className = 'slider-divider';
         
         // Add elements to container
         slider.appendChild(sliderDivider);
         slider.appendChild(sliderHandle);
         
         // Set initial position (50%)
         setSliderPosition(slider, 50);
         
         // Add event listeners for dragging
         let isDragging = false;
         
         sliderHandle.addEventListener('mousedown', () => {
             isDragging = true;
             slider.classList.add('active');
         });
         
         document.addEventListener('mouseup', () => {
             if (isDragging) {
                 isDragging = false;
                 slider.classList.remove('active');
             }
         });
         
         document.addEventListener('mousemove', (e) => {
             if (isDragging) {
                 // Calculate slider position
                 const rect = slider.getBoundingClientRect();
                 const x = e.clientX - rect.left;
                 const position = (x / rect.width) * 100;
                 
                 // Set position within bounds (0-100%)
                 setSliderPosition(slider, Math.min(Math.max(position, 0), 100));
             }
         });
         
         // Touch support for mobile
         sliderHandle.addEventListener('touchstart', (e) => {
             isDragging = true;
             slider.classList.add('active');
             e.preventDefault();
         });
         
         document.addEventListener('touchend', () => {
             if (isDragging) {
                 isDragging = false;
                 slider.classList.remove('active');
             }
         });
         
         document.addEventListener('touchmove', (e) => {
             if (isDragging && e.touches[0]) {
                 // Calculate slider position
                 const rect = slider.getBoundingClientRect();
                 const x = e.touches[0].clientX - rect.left;
                 const position = (x / rect.width) * 100;
                 
                 // Set position within bounds (0-100%)
                 setSliderPosition(slider, Math.min(Math.max(position, 0), 100));
                 e.preventDefault();
             }
         });
     });
 }
 
 /**
  * Set the position of a before/after slider
  * @param {HTMLElement} slider - The slider container
  * @param {number} position - Position percentage (0-100)
  */
 function setSliderPosition(slider, position) {
     // Get elements
     const afterImg = slider.querySelector('.after-image');
     const handle = slider.querySelector('.slider-handle');
     const divider = slider.querySelector('.slider-divider');
     
     // Set positions
     if (afterImg) afterImg.style.width = `${position}%`;
     if (handle) handle.style.left = `${position}%`;
     if (divider) divider.style.left = `${position}%`;
 }
 
 /**
  * Dental Procedure Explainer
  * Interactive visual explainers for dental procedures
  */
 function initDentalProcedureExplainer() {
     const explainers = document.querySelectorAll('.procedure-explainer');
     if (!explainers.length) return;
     
     explainers.forEach(explainer => {
         // Get steps container
         const stepsContainer = explainer.querySelector('.procedure-steps');
         if (!stepsContainer) return;
         
         // Get visual container
         const visualContainer = explainer.querySelector('.procedure-visual');
         if (!visualContainer) return;
         
         // Create visual layers for animation
         const layers = ['bone', 'gum', 'implant', 'crown', 'tooth'];
         let layersHTML = '';
         
         layers.forEach(layer => {
             layersHTML += `<div class="visual-layer ${layer}-layer"></div>`;
         });
         
         visualContainer.innerHTML = layersHTML;
         
         // Get steps
         const steps = stepsContainer.querySelectorAll('.procedure-step');
         
         // Initialize step navigation
         const stepNav = document.createElement('div');
         stepNav.className = 'step-navigation';
         
         let navHTML = '';
         steps.forEach((step, index) => {
             navHTML += `<button class="step-nav-btn ${index === 0 ? 'active' : ''}" data-step="${index + 1}">${index + 1}</button>`;
         });
         
         stepNav.innerHTML = navHTML;
         explainer.appendChild(stepNav);
         
         // Add interactivity
         const navButtons = stepNav.querySelectorAll('.step-nav-btn');
         
         // Show first step by default
         if (steps.length > 0) {
             steps[0].classList.add('active');
             updateVisual(visualContainer, 1);
         }
         
         // Add click handlers to navigation buttons
         navButtons.forEach(button => {
             button.addEventListener('click', function() {
                 const stepNum = parseInt(this.getAttribute('data-step'));
                 
                 // Update active button
                 navButtons.forEach(btn => btn.classList.remove('active'));
                 this.classList.add('active');
                 
                 // Update active step
                 steps.forEach((step, index) => {
                     if (index + 1 === stepNum) {
                         step.classList.add('active');
                     } else {
                         step.classList.remove('active');
                     }
                 });
                 
                 // Update visual
                 updateVisual(visualContainer, stepNum);
             });
         });
     });
 }
 
 /**
  * Update dental procedure visual based on step
  * @param {HTMLElement} visualContainer - The visual container element
  * @param {number} stepNum - Current step number
  */
 function updateVisual(visualContainer, stepNum) {
     // Reset all layers
     visualContainer.querySelectorAll('.visual-layer').forEach(layer => {
         layer.className = layer.className.replace(/ active| highlight/g, '');
     });
     
     // Customize visual based on step
     switch (stepNum) {
         case 1: // Initial examination
             visualContainer.querySelector('.bone-layer').classList.add('active');
             visualContainer.querySelector('.gum-layer').classList.add('active');
             visualContainer.querySelector('.tooth-layer').classList.add('active');
             break;
             
         case 2: // Tooth extraction (if needed)
             visualContainer.querySelector('.bone-layer').classList.add('active');
             visualContainer.querySelector('.gum-layer').classList.add('active');
             break;
             
         case 3: // Implant placement
             visualContainer.querySelector('.bone-layer').classList.add('active');
             visualContainer.querySelector('.gum-layer').classList.add('active');
             visualContainer.querySelector('.implant-layer').classList.add('active');
             visualContainer.querySelector('.implant-layer').classList.add('highlight');
             break;
             
         case 4: // Healing period
             visualContainer.querySelector('.bone-layer').classList.add('active');
             visualContainer.querySelector('.gum-layer').classList.add('active');
             visualContainer.querySelector('.implant-layer').classList.add('active');
             visualContainer.querySelector('.bone-layer').classList.add('highlight');
             break;
             
         case 5: // Crown placement
             visualContainer.querySelector('.bone-layer').classList.add('active');
             visualContainer.querySelector('.gum-layer').classList.add('active');
             visualContainer.querySelector('.implant-layer').classList.add('active');
             visualContainer.querySelector('.crown-layer').classList.add('active');
             visualContainer.querySelector('.crown-layer').classList.add('highlight');
             break;
     }
 }
 
 /**
  * Specialist Finder
  * Location-based search for dental specialists
  */
 function initSpecialistFinder() {
     const specialistFinder = document.querySelector('.specialist-search');
     if (!specialistFinder) return;
     
     const searchInput = specialistFinder.querySelector('input');
     const searchButton = specialistFinder.querySelector('button');
     
     if (!searchInput || !searchButton) return;
     
     // Add results container
     const resultsContainer = document.createElement('div');
     resultsContainer.className = 'specialist-results';
     resultsContainer.style.display = 'none';
     specialistFinder.after(resultsContainer);
     
     // Handle search
     searchButton.addEventListener('click', () => {
         const location = searchInput.value.trim();
         if (!location) return;
         
         // Show loading state
         resultsContainer.innerHTML = '<div class="loading-spinner"></div>';
         resultsContainer.style.display = 'block';
         
         // Simulate API call with setTimeout (in a real implementation, this would be an actual API call)
         setTimeout(() => {
             // Sample specialists data (in a real implementation, this would come from the API)
             const specialists = [
                 {
                     name: 'Dr. Emily Chen',
                     specialty: 'Cosmetic Dentistry',
                     address: '123 Smile Avenue, ' + location,
                     rating: 4.9,
                     reviews: 127,
                     image: '/api/placeholder/80/80'
                 },
                 {
                     name: 'Dr. James Wilson',
                     specialty: 'Implant Specialist',
                     address: '456 Dental Drive, ' + location,
                     rating: 4.8,
                     reviews: 94,
                     image: '/api/placeholder/80/80'
                 },
                 {
                     name: 'Dr. Sarah Johnson',
                     specialty: 'Orthodontist',
                     address: '789 Bright Way, ' + location,
                     rating: 4.7,
                     reviews: 112,
                     image: '/api/placeholder/80/80'
                 }
             ];
             
             // Generate results HTML
             let resultsHTML = '<h3>Specialists Near ' + location + '</h3>';
             resultsHTML += '<div class="specialists-list">';
             
             specialists.forEach(specialist => {
                 resultsHTML += `
                     <div class="specialist-card">
                         <div class="specialist-image">
                             <img src="${specialist.image}" alt="${specialist.name}">
                         </div>
                         <div class="specialist-info">
                             <h4>${specialist.name}</h4>
                             <div class="specialty">${specialist.specialty}</div>
                             <div class="address">${specialist.address}</div>
                             <div class="rating">
                                 <span class="stars">${'★'.repeat(Math.floor(specialist.rating))}${specialist.rating % 1 >= 0.5 ? '½' : ''}</span>
                                 <span class="rating-number">${specialist.rating}</span>
                                 <span class="reviews">(${specialist.reviews} reviews)</span>
                             </div>
                         </div>
                         <a href="#book-appointment" class="cta-button">Book Consultation</a>
                     </div>
                 `;
             });
             
             resultsHTML += '</div>';
             
             // Display results
             resultsContainer.innerHTML = resultsHTML;
             
             // Add animation
             const specialistCards = resultsContainer.querySelectorAll('.specialist-card');
             specialistCards.forEach((card, index) => {
                 card.style.opacity = '0';
                 card.style.transform = 'translateY(20px)';
                 
                 setTimeout(() => {
                     card.style.transition = 'all 0.5s ease';
                     card.style.opacity = '1';
                     card.style.transform = 'translateY(0)';
                 }, 100 + (index * 150));
             });
         }, 1500);
     });
     
     // Add geolocation support
     if (navigator.geolocation) {
         const geoButton = document.createElement('button');
         geoButton.className = 'geo-button';
         geoButton.setAttribute('aria-label', 'Use my current location');
         geoButton.innerHTML = '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><circle cx="12" cy="12" r="3"></circle></svg>';
         
         searchInput.after(geoButton);
         
         geoButton.addEventListener('click', () => {
             navigator.geolocation.getCurrentPosition(position => {
                 // In a real implementation, we'd use the Geocoding API to get the city name
                 // For this example, we'll just use placeholder text
                 searchInput.value = 'Your Current Location';
                 searchButton.click();
             }, error => {
                 console.error('Geolocation error:', error);
                 alert('Unable to get your location. Please enter it manually.');
             });
         });
     }
 }
 
 /**
  * Cost Estimator Calculator
  * Interactive tool to estimate treatment costs
  */
 function initCostEstimator() {
     const costEstimator = document.querySelector('#cost-estimator');
     if (!costEstimator) return;
     
     // Treatment options with cost ranges
     const treatments = [
         {
             id: 'dental-implants',
             name: 'Dental Implants',
             description: 'Permanent replacement for missing teeth',
             baseCost: 3000,
             perToothCost: 1500,
             factorsAffectingCost: [
                 'Number of implants',
                 'Type of implant material',
                 'Need for bone grafting',
                 'Type of final restoration'
             ]
         },
         {
             id: 'veneers',
             name: 'Porcelain Veneers',
             description: 'Thin shells to improve appearance',
             baseCost: 800,
             perToothCost: 1200,
             factorsAffectingCost: [
                 'Number of veneers',
                 'Material (porcelain vs. composite)',
                 'Complexity of placement'
             ]
         },
         {
             id: 'invisalign',
             name: 'Invisalign® Treatment',
             description: 'Clear aligners to straighten teeth',
             baseCost: 3500,
             perToothCost: 0,
             factorsAffectingCost: [
                 'Treatment complexity',
                 'Treatment duration',
                 'Need for refinements'
             ]
         },
         {
             id: 'whitening',
             name: 'Professional Whitening',
             description: 'In-office teeth whitening',
             baseCost: 500,
             perToothCost: 0,
             factorsAffectingCost: [
                 'Whitening method',
                 'Number of sessions',
                 'Current tooth color'
             ]
         }
     ];
     
     // Generate estimator HTML
     let estimatorHTML = `
         <div class="estimator-container">
             <h2>Treatment Cost Estimator</h2>
             <p>Get an estimate for your dental treatment. Actual costs may vary based on individual needs.</p>
             
             <div class="estimator-form">
                 <div class="form-group">
                     <label for="treatment-select">Select Treatment</label>
                     <select id="treatment-select">
                         <option value="">Choose a treatment...</option>
     `;
     
     treatments.forEach(treatment => {
         estimatorHTML += `<option value="${treatment.id}">${treatment.name}</option>`;
     });
     
     estimatorHTML += `
                     </select>
                 </div>
                 
                 <div class="form-group tooth-count" style="display: none;">
                     <label for="tooth-count">Number of Teeth</label>
                     <input type="number" id="tooth-count" min="1" max="32" value="1">
                 </div>
                 
                 <div class="form-group complexity" style="display: none;">
                     <label for="complexity">Treatment Complexity</label>
                     <select id="complexity">
                         <option value="standard">Standard</option>
                         <option value="moderate">Moderate</option>
                         <option value="complex">Complex</option>
                     </select>
                 </div>
                 
                 <div class="form-group">
                     <label for="insurance">Insurance Coverage</label>
                     <select id="insurance">
                         <option value="none">No Insurance</option>
                         <option value="basic">Basic Coverage (20%)</option>
                         <option value="standard">Standard Coverage (40%)</option>
                         <option value="premium">Premium Coverage (60%)</option>
                     </select>
                 </div>
                 
                 <button id="calculate-btn" class="cta-button">Calculate Estimate</button>
             </div>
             
             <div class="estimate-results" style="display: none;">
                 <h3>Your Estimated Cost</h3>
                 <div class="estimate-breakdown"></div>
                 <div class="estimate-disclaimer">
                     <p><strong>Note:</strong> This is an estimate only. Actual costs may vary based on examination findings and specific treatment needs. Contact a specialist for an accurate quote.</p>
                 </div>
             </div>
         </div>
     `;
     
     costEstimator.innerHTML = estimatorHTML;
     
     // Get form elements
     const treatmentSelect = document.getElementById('treatment-select');
     const toothCountInput = document.getElementById('tooth-count');
     const complexitySelect = document.getElementById('complexity');
     const insuranceSelect = document.getElementById('insurance');
     const calculateBtn = document.getElementById('calculate-btn');
     const resultsContainer = costEstimator.querySelector('.estimate-results');
     const breakdownContainer = costEstimator.querySelector('.estimate-breakdown');
     
     // Show/hide relevant form fields based on treatment
     treatmentSelect.addEventListener('change', () => {
         const selectedTreatment = treatmentSelect.value;
         const selectedTreatmentData = treatments.find(t => t.id === selectedTreatment);
         
         if (selectedTreatmentData) {
             // Show/hide tooth count input based on per-tooth cost
             if (selectedTreatmentData.perToothCost > 0) {
                 document.querySelector('.tooth-count').style.display = 'block';
             } else {
                 document.querySelector('.tooth-count').style.display = 'none';
             }
             
             // Show complexity selection for all treatments
             document.querySelector('.complexity').style.display = 'block';
         } else {
             document.querySelector('.tooth-count').style.display = 'none';
             document.querySelector('.complexity').style.display = 'none';
         }
     });
     
     // Calculate estimate on button click
     calculateBtn.addEventListener('click', () => {
         const selectedTreatmentId = treatmentSelect.value;
         
         if (!selectedTreatmentId) {
             alert('Please select a treatment');
             return;
         }
         
         const selectedTreatment = treatments.find(t => t.id === selectedTreatmentId);
         const toothCount = parseInt(toothCountInput.value) || 1;
         const complexity = complexitySelect.value;
         const insurance = insuranceSelect.value;
         
         // Calculate base cost
         let baseCost = selectedTreatment.baseCost;
         let perToothCost = selectedTreatment.perToothCost * toothCount;
         
         // Apply complexity multiplier
         let complexityMultiplier = 1;
         if (complexity === 'moderate') {
             complexityMultiplier = 1.2;
         } else if (complexity === 'complex') {
             complexityMultiplier = 1.5;
         }
         
         let totalBeforeInsurance = (baseCost + perToothCost) * complexityMultiplier;
         
         // Apply insurance discount
         let insuranceDiscount = 0;
         if (insurance === 'basic') {
             insuranceDiscount = totalBeforeInsurance * 0.2;
         } else if (insurance === 'standard') {
             insuranceDiscount = totalBeforeInsurance * 0.4;
         } else if (insurance === 'premium') {
             insuranceDiscount = totalBeforeInsurance * 0.6;
         }
         
         let finalCost = totalBeforeInsurance - insuranceDiscount;
         
         // Generate breakdown HTML
         let breakdownHTML = `
             <div class="cost-breakdown">
                 <div class="breakdown-row">
                     <span>Base Treatment Cost:</span>
                     <span>${baseCost.toFixed(2)}</span>
                 </div>
         `;
         
         if (perToothCost > 0) {
             breakdownHTML += `
                 <div class="breakdown-row">
                     <span>Additional Teeth (${toothCount}):</span>
                     <span>${perToothCost.toFixed(2)}</span>
                 </div>
             `;
         }
         
         if (complexityMultiplier > 1) {
             breakdownHTML += `
                 <div class="breakdown-row">
                     <span>Complexity Adjustment:</span>
                     <span>+${((complexityMultiplier - 1) * 100).toFixed(0)}%</span>
                 </div>
             `;
         }
         
         breakdownHTML += `
             <div class="breakdown-row">
                 <span>Subtotal:</span>
                 <span>${totalBeforeInsurance.toFixed(2)}</span>
             </div>
         `;
         
         if (insuranceDiscount > 0) {
             breakdownHTML += `
                 <div class="breakdown-row">
                     <span>Insurance Coverage:</span>
                     <span>-${insuranceDiscount.toFixed(2)}</span>
                 </div>
             `;
         }
         
         breakdownHTML += `
             <div class="breakdown-row total">
                 <span>Estimated Total:</span>
                 <span>${finalCost.toFixed(2)}</span>
             </div>
             
             <div class="factors-list">
                 <h4>Factors Affecting Cost</h4>
                 <ul>
         `;
         
         selectedTreatment.factorsAffectingCost.forEach(factor => {
             breakdownHTML += `<li>${factor}</li>`;
         });
         
         breakdownHTML += `
                 </ul>
             </div>
             
             <div class="next-steps">
                 <a href="#find-specialist" class="cta-button">Find a Specialist for Consultation</a>
             </div>
         `;
         
         // Update and show results
         breakdownContainer.innerHTML = breakdownHTML;
         resultsContainer.style.display = 'block';
         
         // Scroll to results
         resultsContainer.scrollIntoView({ behavior: 'smooth' });
     });
 }
 
 // Initialize cost estimator
 document.addEventListener('DOMContentLoaded', function() {
     initCostEstimator();
 });
 
